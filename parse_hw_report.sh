#!/bin/bash
# Mitchelle Rasquinha July 25th 2016
# MapR Technologies
# Parses the hw report generated by hw_report.sh to
# highlight issues that must be addressed
# v1: Highlight all errors
# v2: Compare speeds with previously benchmarked numbers
# or "what we expect" numbers

source $PWD/util.sh

if [ $# -ne 1 ]; then 
  echo "Usage: ./parse_hw_report.sh <hw_report_file>"
fi

report=$1
IFS=$'\n'

#Report any previous errors found
grep ERROR $report

function verify_CPU() {
local start=$2
local end=$2

# Cannot have multiple lines for On-line CPU(s) list:
local onlinecpus_found=0
# Cannot have multiple Model Name:
local model_found=0

for line in $(sed -n -e "$start,$end p" $report); do
  if [[ $line =~ "On-line CPU(s) list:" && $onlinecpus_found == 0 ]]; then
    onlinecpus_found=1
    echo $line
  else
    print_warn "Are CPU's homogenous? $line"
  fi

  if [[ $line =~ "Model name:" && $model_found == 0 ]]; then
    model_found=1
    echo $line
  else
    print_warn "Are CPU's homogenous? $line"
  fi
done
}

function verify_NIC() {
local start=$1
local end=$2

local ethspeed=0
local speed_found=0
local duplex_found=0
local duplex=0

for line in $(sed -n -e "$start,$end p" $report); do
  if [[ $line =~ "Speed:" && $speed_found == 0 ]]; then
    speed_found=1
    ethspeed=$(echo $line | grep -o '[0-9]*')
  elif [[ $line =~ "Speed:" ]]; then
    local s=$(echo $line | grep -o '[0-9]*')
    if [[ $s == $ethspeed ]]; then
      print_warn "Is network homogenous? Found speeds $s and $ethspeed"
    fi
  fi

  if [[ $line =~ "Duplex:" && $duplex_found == 0 ]]; then
    duplex_found=1
    duplex=$(echo $line | sed 's/\s*Duplex:\s*//g')
  elif [[ $lien =~ "Duplex:" ]]; then
    local s=$(echo $line | sed 's/\s*Duplex:\s*//g')
    print_warn "Check network on cluster? Found $duplex and $s duplex"
  fi
done
  echo "Cluster has network with $duplex duplex at $ethspeed Mb/s"
}

function verify_OS() {
local start=$1
local end=$2
for line in $(sed -n -e "$start,$end p" $report); do
  local os=""
  local os_version=""
  if [[ $line =~ "CentOS Linux release" ]]; then
    if [[ -z $os_version ]]; then
      os_version=$line
    else
      print_warn "Mutiple OS on cluster"
    fi
    echo $line
  fi
  if [[ $line =~ ^NAME= ]]; then
    if [[ -z $os ]]; then
      os=$line
    else
      print_warn "Mutiple OS on cluster"
    fi
  fi
done
}

function verify_Disks() {
local start=$1
local end=$2
local blkdevices_found=0
local mntdevices_found=0

}


checks=("OS" "CPU" "NIC" "Disks")


for c in ${checks[@]}; do
  echo $c
  begin=($(grep -n "Begin Verify $c" $report| cut -d ':' -f 1))
  if [[ ${#begin[@]} -ne 1 ]]; then
    echo "Input hw report is corrupt. Multiple Begin $c sections"
  fi

  end=($(grep -n "End Verify $c" $report| cut -d ':' -f 1))
  if [[ ${#end[@]} -ne 1 ]]; then
    echo "Input hw report is corrupt. Multiple End $c sections"
  fi

  case $c in
    OS) verify_OS ${begin[0]} ${end[0]} ;;
    CPU) verify_OS ${begin[0]} ${end[0]} ;;
    NIC) verify_NIC ${begin[0]} ${end[0]} ;;
    Disks) verify_Disks ${begin[0]} ${end[0]} ;;
  esac
done


